import { useState, useEffect, useRef } from 'react';
import scss from '@/pages/article/createArticle.module.scss'
import axios from 'axios';
import Editor from './editor';
import Head from 'next/head';
import DefaultLayout from '@/components/layout/default';
import { Router, useRouter } from 'next/router';
import { useContext } from 'react';
import { AuthContext } from '@/context/AuthContext';
import tokenDecoder from '@/context/token-decoder';


export default function CreateArticle() {
  const [title, setTitle] = useState('')
  const [content, setContent] = useState('')
  const [sortOptions, setSortOptions] = useState([])
  const [selectedSort, setSelectedSort] = useState('0')
  const [tag1, setTag1] = useState('')
  const [tag2, setTag2] = useState('')
  const [tag3, setTag3] = useState('')
  const router = useRouter()
  const { user, loading } = useContext(AuthContext)
  const [currentUser, setCurrentUser] = useState(null)

  useEffect(() => {
    if (!user && !loading) {
      const decoded = tokenDecoder();
      if (decoded && decoded.userId) {
        setCurrentUser({
          userId: decoded.userId,
          nickname: decoded.nickname
        });
      } else {
        router.push('/member/login'); // 如果用戶未登入，重定向到登入頁面
      }
    } else if (user) {
      setCurrentUser(user);
    }
  }, [user, loading, router]);

  useEffect(() => {
    fetch('http://localhost:3005/api/article/sort')
      .then(response => response.json())
      .then(data => {
        if (data.status === 'success') {
          setSortOptions(data.sorts)
        }
      }).catch(error => console.log(error.message))
  }, [])

  const handleSubmit = async (e) => {
    e.preventDefault();

    if (selectedSort === '0') {
      alert('請選擇文章分類');
      return;
    }
    
    const tags = [tag1, tag2, tag3].filter(tag => tag.trim() !== '');

    try {
      // 從 content 中提取所有的 imageId
      const parser = new DOMParser();
      const doc = parser.parseFromString(content, 'text/html');
      const imageElements = doc.getElementsByTagName('img');

      const imageIds = Array.from(imageElements).map(img => {
        const src = img.getAttribute('src');
        const match = src.match(/articleImage-(\d+)-\d+.png/);
        return match ? parseInt(match[1]) : null;
      }).filter(id => id !== null);
      const response = await axios.post('http://localhost:3005/api/article/createArticle', { title, content, sort: selectedSort, imageIds, userId: currentUser.userId,tags });
      console.log('Article created:', response.data)
      alert('文章發表成功')
      router.push(`/article`)
    } catch (error) {
      console.error('Error creating article:', error)
    }
  }

  return (
    <>
      <Head>
        <title>發表文章</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <div className={scss.mainbg}>
        <div className={`container ${scss.creatForm}`}>
          <div className={scss.bread}>
            <h4>home/討論區/發表文章</h4>
          </div>
          <form onSubmit={handleSubmit} className={` ${scss.formArea}`}>
            <input
              className={scss.artiTitle}
              type="text"
              value={title}
              onChange={(e) => setTitle(e.target.value)}
              placeholder="文章標題"
              required
            />
            <select className={scss.artiSort} value={selectedSort} onChange={(e) => setSelectedSort(e.target.value)} required>
              <option value="0">選擇分類</option>
              {sortOptions.map(sortitem => (
                <option key={sortitem.id} value={sortitem.id}>{sortitem.sort}</option>
              ))}
            </select>
            <Editor content={content} setContent={setContent} editorHei="400px" />
            <div className={scss.tagInputs}>
              <input
                type="text"
                value={tag1}
                onChange={(e) => setTag1(e.target.value)}
                placeholder="標籤 1 (選填)"
                className={scss.tagInput}
              />
              <input
                type="text"
                value={tag2}
                onChange={(e) => setTag2(e.target.value)}
                placeholder="標籤 2 (選填)"
                className={scss.tagInput}
              />
              <input
                type="text"
                value={tag3}
                onChange={(e) => setTag3(e.target.value)}
                placeholder="標籤 3 (選填)"
                className={scss.tagInput}
              />
            </div>
            <div>
              <button className={scss.postBtn} type="submit">發布文章</button>
            </div>
          </form>
        </div>

      </div>

    </>

  );
}

CreateArticle.layout = DefaultLayout;